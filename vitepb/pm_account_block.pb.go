// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vitepb/pm_account_block.proto

package vitepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is chain compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PMAccountBlock_BlockType int32

const (
	PMAccountBlock_Unknown        PMAccountBlock_BlockType = 0
	PMAccountBlock_SendCreate     PMAccountBlock_BlockType = 1
	PMAccountBlock_SendCall       PMAccountBlock_BlockType = 2
	PMAccountBlock_SendReward     PMAccountBlock_BlockType = 3
	PMAccountBlock_Receive        PMAccountBlock_BlockType = 4
	PMAccountBlock_ReceiveError   PMAccountBlock_BlockType = 5
	PMAccountBlock_SendRefund     PMAccountBlock_BlockType = 6
	PMAccountBlock_GenesisReceive PMAccountBlock_BlockType = 7
)

var PMAccountBlock_BlockType_name = map[int32]string{
	0: "Unknown",
	1: "SendCreate",
	2: "SendCall",
	3: "SendReward",
	4: "Receive",
	5: "ReceiveError",
	6: "SendRefund",
	7: "GenesisReceive",
}
var PMAccountBlock_BlockType_value = map[string]int32{
	"Unknown":        0,
	"SendCreate":     1,
	"SendCall":       2,
	"SendReward":     3,
	"Receive":        4,
	"ReceiveError":   5,
	"SendRefund":     6,
	"GenesisReceive": 7,
}

func (x PMAccountBlock_BlockType) String() string {
	return proto.EnumName(PMAccountBlock_BlockType_name, int32(x))
}
func (PMAccountBlock_BlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pm_account_block_3a8004e3aef585a4, []int{0, 0}
}

type PMAccountBlock struct {
	BlockType            PMAccountBlock_BlockType `protobuf:"varint,1,opt,name=blockType,proto3,enum=vitepb.PMAccountBlock_BlockType" json:"blockType,omitempty"`
	Hash                 []byte                   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height               uint64                   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PrevHash             []byte                   `protobuf:"bytes,4,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	AccountAddress       []byte                   `protobuf:"bytes,5,opt,name=accountAddress,proto3" json:"accountAddress,omitempty"`
	PublicKey            []byte                   `protobuf:"bytes,6,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	ToAddress            []byte                   `protobuf:"bytes,7,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount               []byte                   `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenId              []byte                   `protobuf:"bytes,9,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	FromBlockHash        []byte                   `protobuf:"bytes,10,opt,name=fromBlockHash,proto3" json:"fromBlockHash,omitempty"`
	Data                 []byte                   `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	Quota                uint64                   `protobuf:"varint,12,opt,name=quota,proto3" json:"quota,omitempty"`
	Fee                  []byte                   `protobuf:"bytes,13,opt,name=fee,proto3" json:"fee,omitempty"`
	StateHash            []byte                   `protobuf:"bytes,14,opt,name=StateHash,proto3" json:"StateHash,omitempty"`
	LogHash              []byte                   `protobuf:"bytes,15,opt,name=logHash,proto3" json:"logHash,omitempty"`
	Difficulty           []byte                   `protobuf:"bytes,16,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Nonce                []byte                   `protobuf:"bytes,17,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SendBlockList        []*PMAccountBlock        `protobuf:"bytes,18,rep,name=SendBlockList,proto3" json:"SendBlockList,omitempty"`
	Signature            []byte                   `protobuf:"bytes,19,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PMAccountBlock) Reset()         { *m = PMAccountBlock{} }
func (m *PMAccountBlock) String() string { return proto.CompactTextString(m) }
func (*PMAccountBlock) ProtoMessage()    {}
func (*PMAccountBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_pm_account_block_3a8004e3aef585a4, []int{0}
}
func (m *PMAccountBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PMAccountBlock.Unmarshal(m, b)
}
func (m *PMAccountBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PMAccountBlock.Marshal(b, m, deterministic)
}
func (dst *PMAccountBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PMAccountBlock.Merge(dst, src)
}
func (m *PMAccountBlock) XXX_Size() int {
	return xxx_messageInfo_PMAccountBlock.Size(m)
}
func (m *PMAccountBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_PMAccountBlock.DiscardUnknown(m)
}

var xxx_messageInfo_PMAccountBlock proto.InternalMessageInfo

func (m *PMAccountBlock) GetBlockType() PMAccountBlock_BlockType {
	if m != nil {
		return m.BlockType
	}
	return PMAccountBlock_Unknown
}

func (m *PMAccountBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PMAccountBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PMAccountBlock) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *PMAccountBlock) GetAccountAddress() []byte {
	if m != nil {
		return m.AccountAddress
	}
	return nil
}

func (m *PMAccountBlock) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PMAccountBlock) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *PMAccountBlock) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *PMAccountBlock) GetTokenId() []byte {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *PMAccountBlock) GetFromBlockHash() []byte {
	if m != nil {
		return m.FromBlockHash
	}
	return nil
}

func (m *PMAccountBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PMAccountBlock) GetQuota() uint64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *PMAccountBlock) GetFee() []byte {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *PMAccountBlock) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *PMAccountBlock) GetLogHash() []byte {
	if m != nil {
		return m.LogHash
	}
	return nil
}

func (m *PMAccountBlock) GetDifficulty() []byte {
	if m != nil {
		return m.Difficulty
	}
	return nil
}

func (m *PMAccountBlock) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *PMAccountBlock) GetSendBlockList() []*PMAccountBlock {
	if m != nil {
		return m.SendBlockList
	}
	return nil
}

func (m *PMAccountBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*PMAccountBlock)(nil), "vitepb.PMAccountBlock")
	proto.RegisterEnum("vitepb.PMAccountBlock_BlockType", PMAccountBlock_BlockType_name, PMAccountBlock_BlockType_value)
}

func init() {
	proto.RegisterFile("vitepb/pm_account_block.proto", fileDescriptor_pm_account_block_3a8004e3aef585a4)
}

var fileDescriptor_pm_account_block_3a8004e3aef585a4 = []byte{
	// 449 bytes of chain gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x5f, 0x8b, 0xd3, 0x40,
	0x14, 0xc5, 0xcd, 0xf6, 0xff, 0x6d, 0x1b, 0xc7, 0xab, 0x2c, 0x83, 0xa8, 0x84, 0x45, 0xa4, 0x4f,
	0x15, 0xd6, 0x57, 0x11, 0x76, 0x45, 0x54, 0x54, 0x90, 0xac, 0x3e, 0x2f, 0xd3, 0xe4, 0xa6, 0x0d,
	0x4d, 0x67, 0xe2, 0x64, 0xd2, 0xa5, 0x1f, 0xc1, 0x2f, 0xea, 0xe7, 0x90, 0x99, 0x49, 0x52, 0x2b,
	0xfb, 0x36, 0xe7, 0x9c, 0xdf, 0xdc, 0x9e, 0xde, 0x0c, 0x3c, 0xdf, 0xe7, 0x86, 0xca, 0xd5, 0xeb,
	0x72, 0x77, 0x2b, 0x92, 0x44, 0xd5, 0xd2, 0xdc, 0xae, 0x0a, 0x95, 0x6c, 0x97, 0xa5, 0x56, 0x46,
	0xe1, 0xd0, 0xc7, 0x17, 0x7f, 0x06, 0x10, 0x7e, 0xff, 0x76, 0xe5, 0x89, 0x6b, 0x0b, 0xe0, 0x3b,
	0x98, 0x38, 0xf2, 0xc7, 0xa1, 0x24, 0x1e, 0x44, 0xc1, 0x22, 0xbc, 0x8c, 0x96, 0x1e, 0x5f, 0x9e,
	0xa2, 0xcb, 0xeb, 0x96, 0x8b, 0x8f, 0x57, 0x10, 0xa1, 0xbf, 0x11, 0xd5, 0x86, 0x9f, 0x45, 0xc1,
	0x62, 0x16, 0xbb, 0x33, 0x9e, 0xc3, 0x70, 0x43, 0xf9, 0x7a, 0x63, 0x78, 0x2f, 0x0a, 0x16, 0xfd,
	0xb8, 0x51, 0xf8, 0x14, 0xc6, 0xa5, 0xa6, 0xfd, 0x27, 0xcb, 0xf7, 0x1d, 0xdf, 0x69, 0x7c, 0x05,
	0x61, 0xd3, 0xfc, 0x2a, 0x4d, 0x35, 0x55, 0x15, 0x1f, 0x38, 0xe2, 0x3f, 0x17, 0x9f, 0xc1, 0xa4,
	0xac, 0x57, 0x45, 0x9e, 0x7c, 0xa1, 0x03, 0x1f, 0x3a, 0xe4, 0x68, 0xd8, 0xd4, 0xa8, 0x76, 0xc0,
	0xc8, 0xa7, 0x9d, 0x61, 0x7b, 0x89, 0x9d, 0x1d, 0xc6, 0xc7, 0x2e, 0x6a, 0x14, 0x72, 0x18, 0x19,
	0xb5, 0x25, 0xf9, 0x39, 0xe5, 0x13, 0x17, 0xb4, 0x12, 0x5f, 0xc2, 0x3c, 0xd3, 0x6a, 0xe7, 0xfe,
	0xb9, 0xab, 0x0d, 0x2e, 0x3f, 0x35, 0xed, 0x0e, 0x52, 0x61, 0x04, 0x9f, 0xfa, 0x1d, 0xd8, 0x33,
	0x3e, 0x81, 0xc1, 0xaf, 0x5a, 0x19, 0xc1, 0x67, 0x6e, 0x05, 0x5e, 0x20, 0x83, 0x5e, 0x46, 0xc4,
	0xe7, 0x0e, 0xb4, 0x47, 0xdb, 0xf8, 0xc6, 0x08, 0x43, 0x6e, 0x7a, 0xe8, 0x1b, 0x77, 0x86, 0x6d,
	0x56, 0xa8, 0xb5, 0xcb, 0x1e, 0xfa, 0x66, 0x8d, 0xc4, 0x17, 0x00, 0x69, 0x9e, 0x65, 0x79, 0x52,
	0x17, 0xe6, 0xc0, 0x99, 0x0b, 0xff, 0x71, 0xec, 0xef, 0x4b, 0x25, 0x13, 0xe2, 0x8f, 0x5c, 0xe4,
	0x05, 0xbe, 0x85, 0xf9, 0x0d, 0xc9, 0xd4, 0x55, 0xff, 0x9a, 0x57, 0x86, 0x63, 0xd4, 0x5b, 0x4c,
	0x2f, 0xcf, 0xef, 0xff, 0xe2, 0xf1, 0x29, 0x6c, 0xbb, 0x56, 0xf9, 0x5a, 0x0a, 0x53, 0x6b, 0xe2,
	0x8f, 0x7d, 0xd7, 0xce, 0xb8, 0xf8, 0x1d, 0xc0, 0xa4, 0x7b, 0x22, 0x38, 0x85, 0xd1, 0x4f, 0xb9,
	0x95, 0xea, 0x4e, 0xb2, 0x07, 0x18, 0x02, 0xd8, 0x49, 0xef, 0x35, 0x09, 0x43, 0x2c, 0xc0, 0x19,
	0x8c, 0x9d, 0x16, 0x45, 0xc1, 0xce, 0xda, 0x34, 0xa6, 0x3b, 0xa1, 0x53, 0xd6, 0xb3, 0x57, 0x63,
	0x4a, 0x28, 0xdf, 0x13, 0xeb, 0x23, 0x83, 0x59, 0x23, 0x3e, 0x68, 0xad, 0x34, 0x1b, 0x1c, 0xf1,
	0xac, 0x96, 0x29, 0x1b, 0x22, 0x42, 0xf8, 0x91, 0x24, 0x55, 0x79, 0xd5, 0xde, 0x1a, 0xad, 0x86,
	0xee, 0xdd, 0xbf, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x51, 0x9f, 0xc5, 0xe6, 0x18, 0x03, 0x00,
	0x00,
}
