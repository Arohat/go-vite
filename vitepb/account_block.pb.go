// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vitepb/account_block.proto

package vitepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountBlock_BlockType int32

const (
	AccountBlock_Unknown        AccountBlock_BlockType = 0
	AccountBlock_SendCreate     AccountBlock_BlockType = 1
	AccountBlock_SendCall       AccountBlock_BlockType = 2
	AccountBlock_SendReward     AccountBlock_BlockType = 3
	AccountBlock_Receive        AccountBlock_BlockType = 4
	AccountBlock_ReceiveError   AccountBlock_BlockType = 5
	AccountBlock_SendRefund     AccountBlock_BlockType = 6
	AccountBlock_GenesisReceive AccountBlock_BlockType = 7
)

var AccountBlock_BlockType_name = map[int32]string{
	0: "Unknown",
	1: "SendCreate",
	2: "SendCall",
	3: "SendReward",
	4: "Receive",
	5: "ReceiveError",
	6: "SendRefund",
	7: "GenesisReceive",
}
var AccountBlock_BlockType_value = map[string]int32{
	"Unknown":        0,
	"SendCreate":     1,
	"SendCall":       2,
	"SendReward":     3,
	"Receive":        4,
	"ReceiveError":   5,
	"SendRefund":     6,
	"GenesisReceive": 7,
}

func (x AccountBlock_BlockType) String() string {
	return proto.EnumName(AccountBlock_BlockType_name, int32(x))
}
func (AccountBlock_BlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_account_block_13cc3d0a39bd3eb1, []int{0, 0}
}

type AccountBlock struct {
	BlockType            AccountBlock_BlockType `protobuf:"varint,1,opt,name=blockType,proto3,enum=vitepb.AccountBlock_BlockType" json:"blockType,omitempty"`
	Hash                 []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height               uint64                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PrevHash             []byte                 `protobuf:"bytes,4,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	AccountAddress       []byte                 `protobuf:"bytes,5,opt,name=accountAddress,proto3" json:"accountAddress,omitempty"`
	PublicKey            []byte                 `protobuf:"bytes,6,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	ToAddress            []byte                 `protobuf:"bytes,7,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount               []byte                 `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenId              []byte                 `protobuf:"bytes,9,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	FromBlockHash        []byte                 `protobuf:"bytes,10,opt,name=fromBlockHash,proto3" json:"fromBlockHash,omitempty"`
	Data                 []byte                 `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	Quota                uint64                 `protobuf:"varint,12,opt,name=quota,proto3" json:"quota,omitempty"`
	Fee                  []byte                 `protobuf:"bytes,13,opt,name=fee,proto3" json:"fee,omitempty"`
	StateHash            []byte                 `protobuf:"bytes,14,opt,name=StateHash,proto3" json:"StateHash,omitempty"`
	LogHash              []byte                 `protobuf:"bytes,15,opt,name=logHash,proto3" json:"logHash,omitempty"`
	Difficulty           []byte                 `protobuf:"bytes,16,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Nonce                []byte                 `protobuf:"bytes,17,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SendBlockList        []*AccountBlock        `protobuf:"bytes,18,rep,name=SendBlockList,proto3" json:"SendBlockList,omitempty"`
	Signature            []byte                 `protobuf:"bytes,19,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AccountBlock) Reset()         { *m = AccountBlock{} }
func (m *AccountBlock) String() string { return proto.CompactTextString(m) }
func (*AccountBlock) ProtoMessage()    {}
func (*AccountBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_block_13cc3d0a39bd3eb1, []int{0}
}
func (m *AccountBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountBlock.Unmarshal(m, b)
}
func (m *AccountBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountBlock.Marshal(b, m, deterministic)
}
func (dst *AccountBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountBlock.Merge(dst, src)
}
func (m *AccountBlock) XXX_Size() int {
	return xxx_messageInfo_AccountBlock.Size(m)
}
func (m *AccountBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountBlock.DiscardUnknown(m)
}

var xxx_messageInfo_AccountBlock proto.InternalMessageInfo

func (m *AccountBlock) GetBlockType() AccountBlock_BlockType {
	if m != nil {
		return m.BlockType
	}
	return AccountBlock_Unknown
}

func (m *AccountBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *AccountBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *AccountBlock) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *AccountBlock) GetAccountAddress() []byte {
	if m != nil {
		return m.AccountAddress
	}
	return nil
}

func (m *AccountBlock) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *AccountBlock) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *AccountBlock) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *AccountBlock) GetTokenId() []byte {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *AccountBlock) GetFromBlockHash() []byte {
	if m != nil {
		return m.FromBlockHash
	}
	return nil
}

func (m *AccountBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AccountBlock) GetQuota() uint64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *AccountBlock) GetFee() []byte {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *AccountBlock) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *AccountBlock) GetLogHash() []byte {
	if m != nil {
		return m.LogHash
	}
	return nil
}

func (m *AccountBlock) GetDifficulty() []byte {
	if m != nil {
		return m.Difficulty
	}
	return nil
}

func (m *AccountBlock) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AccountBlock) GetSendBlockList() []*AccountBlock {
	if m != nil {
		return m.SendBlockList
	}
	return nil
}

func (m *AccountBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountBlock)(nil), "vitepb.AccountBlock")
	proto.RegisterEnum("vitepb.AccountBlock_BlockType", AccountBlock_BlockType_name, AccountBlock_BlockType_value)
}

func init() {
	proto.RegisterFile("vitepb/account_block.proto", fileDescriptor_account_block_13cc3d0a39bd3eb1)
}

var fileDescriptor_account_block_13cc3d0a39bd3eb1 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x51, 0x6f, 0xd3, 0x30,
	0x14, 0x85, 0xc9, 0xda, 0xa6, 0xed, 0x6d, 0x1a, 0xcc, 0x65, 0x42, 0xd6, 0x84, 0xa6, 0x6a, 0x42,
	0xa8, 0x4f, 0x45, 0x1a, 0x6f, 0x88, 0x97, 0x0d, 0x21, 0x40, 0xf0, 0x94, 0xc1, 0x33, 0x72, 0x93,
	0x9b, 0x36, 0x6a, 0x66, 0x07, 0xc7, 0xe9, 0xd4, 0x9f, 0xc0, 0xbf, 0xe4, 0xa7, 0x20, 0xdb, 0x49,
	0xba, 0x22, 0xde, 0x7c, 0xce, 0x77, 0x7c, 0x7b, 0x7a, 0x63, 0xb8, 0xd8, 0x17, 0x86, 0xaa, 0xf5,
	0x1b, 0x91, 0xa6, 0xaa, 0x91, 0xe6, 0xe7, 0xba, 0x54, 0xe9, 0x6e, 0x55, 0x69, 0x65, 0x14, 0x86,
	0x9e, 0x5d, 0xfd, 0x19, 0x41, 0x74, 0xe3, 0xf9, 0xad, 0xc5, 0xf8, 0x1e, 0xa6, 0x2e, 0xf7, 0xfd,
	0x50, 0x11, 0x0f, 0x16, 0xc1, 0x32, 0xbe, 0xbe, 0x5c, 0xf9, 0xf0, 0xea, 0x71, 0x70, 0x75, 0xdb,
	0xa5, 0x92, 0xe3, 0x05, 0x44, 0x18, 0x6e, 0x45, 0xbd, 0xe5, 0x67, 0x8b, 0x60, 0x19, 0x25, 0xee,
	0x8c, 0x2f, 0x20, 0xdc, 0x52, 0xb1, 0xd9, 0x1a, 0x3e, 0x58, 0x04, 0xcb, 0x61, 0xd2, 0x2a, 0xbc,
	0x80, 0x49, 0xa5, 0x69, 0xff, 0xd9, 0xe6, 0x87, 0x2e, 0xdf, 0x6b, 0x7c, 0x0d, 0x71, 0xdb, 0xfa,
	0x26, 0xcb, 0x34, 0xd5, 0x35, 0x1f, 0xb9, 0xc4, 0x3f, 0x2e, 0xbe, 0x84, 0x69, 0xd5, 0xac, 0xcb,
	0x22, 0xfd, 0x4a, 0x07, 0x1e, 0xba, 0xc8, 0xd1, 0xb0, 0xd4, 0xa8, 0x6e, 0xc0, 0xd8, 0xd3, 0xde,
	0xb0, 0xbd, 0xc4, 0xbd, 0x1d, 0xc6, 0x27, 0x0e, 0xb5, 0x0a, 0x39, 0x8c, 0x8d, 0xda, 0x91, 0xfc,
	0x92, 0xf1, 0xa9, 0x03, 0x9d, 0xc4, 0x57, 0x30, 0xcf, 0xb5, 0xba, 0x77, 0xff, 0xdc, 0xd5, 0x06,
	0xc7, 0x4f, 0x4d, 0xbb, 0x83, 0x4c, 0x18, 0xc1, 0x67, 0x7e, 0x07, 0xf6, 0x8c, 0xe7, 0x30, 0xfa,
	0xd5, 0x28, 0x23, 0x78, 0xe4, 0x56, 0xe0, 0x05, 0x32, 0x18, 0xe4, 0x44, 0x7c, 0xee, 0x82, 0xf6,
	0x68, 0x1b, 0xdf, 0x19, 0x61, 0xc8, 0x4d, 0x8f, 0x7d, 0xe3, 0xde, 0xb0, 0xcd, 0x4a, 0xb5, 0x71,
	0xec, 0xa9, 0x6f, 0xd6, 0x4a, 0xbc, 0x04, 0xc8, 0x8a, 0x3c, 0x2f, 0xd2, 0xa6, 0x34, 0x07, 0xce,
	0x1c, 0x7c, 0xe4, 0xd8, 0xdf, 0x97, 0x4a, 0xa6, 0xc4, 0x9f, 0x39, 0xe4, 0x05, 0xbe, 0x83, 0xf9,
	0x1d, 0xc9, 0xcc, 0x55, 0xff, 0x56, 0xd4, 0x86, 0xe3, 0x62, 0xb0, 0x9c, 0x5d, 0x9f, 0xff, 0xef,
	0x7b, 0x27, 0xa7, 0x51, 0xdb, 0xb4, 0x2e, 0x36, 0x52, 0x98, 0x46, 0x13, 0x7f, 0xee, 0x9b, 0xf6,
	0xc6, 0xd5, 0xef, 0x00, 0xa6, 0xfd, 0x03, 0xc1, 0x19, 0x8c, 0x7f, 0xc8, 0x9d, 0x54, 0x0f, 0x92,
	0x3d, 0xc1, 0x18, 0xc0, 0x4e, 0xfa, 0xa0, 0x49, 0x18, 0x62, 0x01, 0x46, 0x30, 0x71, 0x5a, 0x94,
	0x25, 0x3b, 0xeb, 0x68, 0x42, 0x0f, 0x42, 0x67, 0x6c, 0x60, 0xaf, 0x26, 0x94, 0x52, 0xb1, 0x27,
	0x36, 0x44, 0x06, 0x51, 0x2b, 0x3e, 0x6a, 0xad, 0x34, 0x1b, 0x1d, 0xe3, 0x79, 0x23, 0x33, 0x16,
	0x22, 0x42, 0xfc, 0x89, 0x24, 0xd5, 0x45, 0xdd, 0xdd, 0x1a, 0xaf, 0x43, 0xf7, 0xe2, 0xdf, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xe7, 0x4b, 0x8b, 0x0f, 0x03, 0x00, 0x00,
}
