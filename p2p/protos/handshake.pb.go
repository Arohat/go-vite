// Code generated by protoc-gen-go. DO NOT EDIT.
// source: handshake.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HeartBeat struct {
	State                map[int32][]byte `protobuf:"bytes,3,rep,name=State,proto3" json:"State,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp            int64            `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{0}
}

func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeat.Unmarshal(m, b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
}
func (m *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(m, src)
}
func (m *HeartBeat) XXX_Size() int {
	return xxx_messageInfo_HeartBeat.Size(m)
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetState() map[int32][]byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *HeartBeat) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Handshake struct {
	Version              uint32      `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	NetId                uint32      `protobuf:"varint,2,opt,name=NetId,proto3" json:"NetId,omitempty"`
	Name                 string      `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                   []byte      `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Timestamp            int64       `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Protocols            []*Protocol `protobuf:"bytes,6,rep,name=Protocols,proto3" json:"Protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Handshake) Reset()         { *m = Handshake{} }
func (m *Handshake) String() string { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()    {}
func (*Handshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{1}
}

func (m *Handshake) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Handshake.Unmarshal(m, b)
}
func (m *Handshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Handshake.Marshal(b, m, deterministic)
}
func (m *Handshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handshake.Merge(m, src)
}
func (m *Handshake) XXX_Size() int {
	return xxx_messageInfo_Handshake.Size(m)
}
func (m *Handshake) XXX_DiscardUnknown() {
	xxx_messageInfo_Handshake.DiscardUnknown(m)
}

var xxx_messageInfo_Handshake proto.InternalMessageInfo

func (m *Handshake) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Handshake) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Handshake) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Handshake) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Handshake) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Handshake) GetProtocols() []*Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

type Protocol struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{2}
}

func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Protocol.Unmarshal(m, b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return xxx_messageInfo_Protocol.Size(m)
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

func (m *Protocol) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Protocol) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*HeartBeat)(nil), "protos.HeartBeat")
	proto.RegisterMapType((map[int32][]byte)(nil), "protos.HeartBeat.StateEntry")
	proto.RegisterType((*Handshake)(nil), "protos.Handshake")
	proto.RegisterType((*Protocol)(nil), "protos.Protocol")
}

func init() { proto.RegisterFile("handshake.proto", fileDescriptor_a77305914d5d202f) }

var fileDescriptor_a77305914d5d202f = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe5, 0xa4, 0x29, 0xe4, 0x68, 0xa1, 0x3a, 0x31, 0x58, 0xa8, 0x43, 0x94, 0xc9, 0x93,
	0x87, 0xb2, 0x54, 0x8c, 0x28, 0x48, 0x64, 0xa9, 0x90, 0x41, 0xec, 0x07, 0xb5, 0xd4, 0xaa, 0x4d,
	0x52, 0xc5, 0x06, 0xa9, 0x4f, 0xc2, 0x53, 0xf0, 0x8e, 0xc8, 0x76, 0x4d, 0x04, 0x53, 0xee, 0xcf,
	0xfd, 0x77, 0xf7, 0xdd, 0x19, 0xae, 0x36, 0xd4, 0xae, 0xcd, 0x86, 0x76, 0x5a, 0x1e, 0xfa, 0xce,
	0x76, 0x38, 0xf6, 0x1f, 0x53, 0x7e, 0x31, 0xc8, 0x1f, 0x35, 0xf5, 0xf6, 0x5e, 0x93, 0xc5, 0x05,
	0x64, 0xcf, 0x96, 0xac, 0xe6, 0x69, 0x91, 0x8a, 0x8b, 0xc5, 0x3c, 0x98, 0x8d, 0xfc, 0x75, 0x48,
	0x9f, 0x7e, 0x68, 0x6d, 0x7f, 0x54, 0xc1, 0x8a, 0x73, 0xc8, 0x5f, 0xb6, 0x8d, 0x36, 0x96, 0x9a,
	0x03, 0x1f, 0x15, 0x4c, 0xa4, 0x6a, 0xf8, 0x71, 0xb3, 0x04, 0x18, 0x4a, 0x70, 0x06, 0xe9, 0x4e,
	0x1f, 0x39, 0x2b, 0x98, 0xc8, 0x94, 0x0b, 0xf1, 0x1a, 0xb2, 0x4f, 0xda, 0x7f, 0x68, 0x9e, 0x14,
	0x4c, 0x4c, 0x54, 0x10, 0x77, 0xc9, 0x92, 0x95, 0xdf, 0x8e, 0x2c, 0x52, 0x23, 0x87, 0xb3, 0x57,
	0xdd, 0x9b, 0x6d, 0xd7, 0xfa, 0xea, 0xa9, 0x8a, 0xd2, 0x75, 0x58, 0x69, 0x5b, 0xaf, 0x7d, 0x87,
	0xa9, 0x0a, 0x02, 0x11, 0x46, 0x2b, 0x6a, 0xdc, 0x22, 0x4c, 0xe4, 0xca, 0xc7, 0x78, 0x09, 0x49,
	0x5d, 0x79, 0xc4, 0x89, 0x4a, 0xea, 0xea, 0x2f, 0x79, 0xf6, 0x8f, 0x1c, 0x25, 0xe4, 0x4f, 0x6e,
	0xfb, 0xf7, 0x6e, 0x6f, 0xf8, 0xd8, 0xdf, 0x63, 0x16, 0xef, 0x11, 0x13, 0x6a, 0xb0, 0x94, 0x12,
	0xce, 0xa3, 0x38, 0x4d, 0x0a, 0xa0, 0x6e, 0x12, 0xc2, 0xa8, 0x22, 0x4b, 0xa7, 0x25, 0x7d, 0xfc,
	0x16, 0x5e, 0xe0, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xab, 0x9d, 0xd7, 0x60, 0x9b, 0x01, 0x00,
	0x00,
}
