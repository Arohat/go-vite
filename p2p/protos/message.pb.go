// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// tcp message
type Disc struct {
	Reason               uint64   `protobuf:"varint,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Disc) Reset()         { *m = Disc{} }
func (m *Disc) String() string { return proto.CompactTextString(m) }
func (*Disc) ProtoMessage()    {}
func (*Disc) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Disc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Disc.Unmarshal(m, b)
}
func (m *Disc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Disc.Marshal(b, m, deterministic)
}
func (m *Disc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disc.Merge(m, src)
}
func (m *Disc) XXX_Size() int {
	return xxx_messageInfo_Disc.Size(m)
}
func (m *Disc) XXX_DiscardUnknown() {
	xxx_messageInfo_Disc.DiscardUnknown(m)
}

var xxx_messageInfo_Disc proto.InternalMessageInfo

func (m *Disc) GetReason() uint64 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type Handshake struct {
	NetID                uint64    `protobuf:"varint,1,opt,name=NetID,proto3" json:"NetID,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                   []byte    `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	CmdSets              []*CmdSet `protobuf:"bytes,4,rep,name=CmdSets,proto3" json:"CmdSets,omitempty"`
	Version              uint64    `protobuf:"varint,5,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Handshake) Reset()         { *m = Handshake{} }
func (m *Handshake) String() string { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()    {}
func (*Handshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *Handshake) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Handshake.Unmarshal(m, b)
}
func (m *Handshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Handshake.Marshal(b, m, deterministic)
}
func (m *Handshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handshake.Merge(m, src)
}
func (m *Handshake) XXX_Size() int {
	return xxx_messageInfo_Handshake.Size(m)
}
func (m *Handshake) XXX_DiscardUnknown() {
	xxx_messageInfo_Handshake.DiscardUnknown(m)
}

var xxx_messageInfo_Handshake proto.InternalMessageInfo

func (m *Handshake) GetNetID() uint64 {
	if m != nil {
		return m.NetID
	}
	return 0
}

func (m *Handshake) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Handshake) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Handshake) GetCmdSets() []*CmdSet {
	if m != nil {
		return m.CmdSets
	}
	return nil
}

func (m *Handshake) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CmdSet struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdSet) Reset()         { *m = CmdSet{} }
func (m *CmdSet) String() string { return proto.CompactTextString(m) }
func (*CmdSet) ProtoMessage()    {}
func (*CmdSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *CmdSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdSet.Unmarshal(m, b)
}
func (m *CmdSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdSet.Marshal(b, m, deterministic)
}
func (m *CmdSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdSet.Merge(m, src)
}
func (m *CmdSet) XXX_Size() int {
	return xxx_messageInfo_CmdSet.Size(m)
}
func (m *CmdSet) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdSet.DiscardUnknown(m)
}

var xxx_messageInfo_CmdSet proto.InternalMessageInfo

func (m *CmdSet) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CmdSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Disc)(nil), "protos.Disc")
	proto.RegisterType((*Handshake)(nil), "protos.Handshake")
	proto.RegisterType((*CmdSet)(nil), "protos.CmdSet")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0x72,
	0x5c, 0x2c, 0x2e, 0x99, 0xc5, 0xc9, 0x42, 0x62, 0x5c, 0x6c, 0x45, 0xa9, 0x89, 0xc5, 0xf9, 0x79,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x50, 0x9e, 0x52, 0x27, 0x23, 0x17, 0xa7, 0x47, 0x62,
	0x5e, 0x4a, 0x71, 0x46, 0x62, 0x76, 0xaa, 0x90, 0x08, 0x17, 0xab, 0x5f, 0x6a, 0x89, 0xa7, 0x0b,
	0x54, 0x11, 0x84, 0x23, 0x24, 0xc4, 0xc5, 0xe2, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8,
	0xc1, 0x19, 0x04, 0x66, 0x0b, 0xf1, 0x71, 0x31, 0x79, 0xba, 0x48, 0x30, 0x2b, 0x30, 0x6a, 0xf0,
	0x04, 0x31, 0x79, 0xba, 0x08, 0x69, 0x70, 0xb1, 0x3b, 0xe7, 0xa6, 0x04, 0xa7, 0x96, 0x14, 0x4b,
	0xb0, 0x28, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0x41, 0x1c, 0x52, 0xac, 0x07, 0x11, 0x0e, 0x82, 0x49,
	0x0b, 0x49, 0x70, 0xb1, 0x87, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x49, 0xb0, 0x82, 0x6d, 0x81,
	0x71, 0x95, 0x74, 0xb8, 0xd8, 0x20, 0x8a, 0xa0, 0xa6, 0x43, 0x1c, 0xc1, 0x84, 0xdd, 0x05, 0x49,
	0x10, 0x1f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x35, 0x08, 0x97, 0x73, 0xf9, 0x00, 0x00,
	0x00,
}
