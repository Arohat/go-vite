syntax="proto3";

package proto;

message Account {
    bytes Token = 1;
    bytes Available = 2;
    bytes Locked   = 3;
}

message Fund {
    bytes Address = 1;
    repeated Account Accounts = 2;
}

message FundSettle {
    bool isTradeToken = 1;
    bytes IncAvailable = 2;
    bytes ReduceLocked = 3;
    bytes ReleaseLocked = 4;
}

message UserFundSettle {
    bytes Address = 1;
    repeated FundSettle fundSettles = 2;
}

message UserFeeSettle {
    bytes Address = 1;
    bytes BaseFee = 2; // FeeSumAccount.BaseAmount, FeeSumAccount.InviterBonusAmount, UserFeeAccount.InviterBonusAmount
    bytes BrokerFee = 3; // BrokerFeeAccount.Amount
}

message SettleActions {
    bytes TradeToken = 1;
    bytes QuoteToken = 2;
    repeated UserFundSettle fundActions = 3;
    repeated UserFeeSettle feeActions = 4;
}

message FeeSumAccount {
    bytes Token = 1;
    bytes BaseAmount = 2; // for vx mine and dividend
    bytes InviteBonusAmount = 3; // only for vx mine
    // rolled amount : 99% part of last period BaseAmount rolled to this period +
    // new market fee +
    // new inviter fee +
    // baseFee of market not allow mine
    bytes DividendPoolAmount = 4;
}

message FeeSumByPeriod {
    repeated FeeSumAccount fees = 1;
    uint64 lastValidPeriod = 2;
    bool FinishFeeDividend = 3;
    bool FinishVxMine = 4;
}

message UserFeeWithPeriod {
    repeated UserFeeAccount userFees = 1;
    uint64 Period = 2;
}

message UserFees {
    repeated UserFeeWithPeriod fees = 1;
}

message UserFeeAccount {
    bytes Token = 1;
    bytes BaseAmount = 2; // for vx mine
    bytes InviteBonusAmount = 3; // for vx mine
}

message BrokerMarketFee {
    int32 MarketId = 1;
    bytes Amount = 2;
}

message BrokerFeeAccount {
    bytes Token = 1;
    repeated BrokerMarketFee MarketFees  = 2;
}

message BrokerFeeSumByPeriod {
    repeated BrokerFeeAccount brokerFees = 1;
}

message VxFundWithPeriod {
    uint64 Period = 1; // last snapshot height in period
    bytes Amount = 2;
}

message VxFunds {
    repeated VxFundWithPeriod funds = 1;
}

message PledgeVip {
    int64 Timestamp = 1;
    int32 PledgeTimes = 2; //sum pledge times in case duplicate pledge happen
}
